// Code generated by protoc-gen-go. DO NOT EDIT.
// source: descIDL.proto

package description

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Пока такая заглушка, для передачи "без параметров" - нужно найти реализацию =)
type Request struct {
	N                    int32    `protobuf:"varint,1,opt,name=N,proto3" json:"N,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_489bc35f038b97eb, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type Reply struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_489bc35f038b97eb, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "description.Request")
	proto.RegisterType((*Reply)(nil), "description.Reply")
}

func init() { proto.RegisterFile("descIDL.proto", fileDescriptor_489bc35f038b97eb) }

var fileDescriptor_489bc35f038b97eb = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x49, 0x2d, 0x4e,
	0xf6, 0x74, 0xf1, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x06, 0x71, 0x8b, 0x32, 0x0b,
	0x4a, 0x32, 0xf3, 0xf3, 0x94, 0xc4, 0xb9, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x78, 0xb8, 0x18, 0xfd, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x18, 0xfd, 0x94, 0xa4, 0xb9,
	0x58, 0x83, 0x52, 0x0b, 0x72, 0x2a, 0x85, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0xc1, 0x32,
	0x9c, 0x41, 0x60, 0xb6, 0x91, 0x2f, 0x17, 0x9b, 0x73, 0x62, 0x72, 0x46, 0x6a, 0x91, 0x90, 0x33,
	0x97, 0xb0, 0x7b, 0x6a, 0x49, 0x50, 0x62, 0x5e, 0x4a, 0x7e, 0xae, 0x4b, 0x62, 0x49, 0x62, 0x70,
	0x49, 0x51, 0x6a, 0x62, 0xae, 0x90, 0x88, 0x1e, 0x92, 0x25, 0x7a, 0x50, 0x1b, 0xa4, 0x84, 0xd0,
	0x44, 0x0b, 0x72, 0x2a, 0x95, 0x18, 0x0c, 0x18, 0x8d, 0x3c, 0xb8, 0x38, 0x9c, 0xf3, 0xf3, 0x8a,
	0x4b, 0x73, 0x53, 0x8b, 0x84, 0x6c, 0xb8, 0x78, 0x20, 0x46, 0x07, 0x95, 0xe6, 0xe5, 0xa5, 0x16,
	0x91, 0x66, 0x52, 0x12, 0x1b, 0xd8, 0x8b, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0x6a,
	0xe5, 0xac, 0xf3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CacherClient is the client API for Cacher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CacherClient interface {
	GetRandomDataStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Cacher_GetRandomDataStreamClient, error)
}

type cacherClient struct {
	cc *grpc.ClientConn
}

func NewCacherClient(cc *grpc.ClientConn) CacherClient {
	return &cacherClient{cc}
}

func (c *cacherClient) GetRandomDataStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Cacher_GetRandomDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cacher_serviceDesc.Streams[0], "/description.Cacher/GetRandomDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacherGetRandomDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cacher_GetRandomDataStreamClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type cacherGetRandomDataStreamClient struct {
	grpc.ClientStream
}

func (x *cacherGetRandomDataStreamClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CacherServer is the server API for Cacher service.
type CacherServer interface {
	GetRandomDataStream(*Request, Cacher_GetRandomDataStreamServer) error
}

func RegisterCacherServer(s *grpc.Server, srv CacherServer) {
	s.RegisterService(&_Cacher_serviceDesc, srv)
}

func _Cacher_GetRandomDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacherServer).GetRandomDataStream(m, &cacherGetRandomDataStreamServer{stream})
}

type Cacher_GetRandomDataStreamServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type cacherGetRandomDataStreamServer struct {
	grpc.ServerStream
}

func (x *cacherGetRandomDataStreamServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

var _Cacher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "description.Cacher",
	HandlerType: (*CacherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRandomDataStream",
			Handler:       _Cacher_GetRandomDataStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "descIDL.proto",
}

// ConsumerClient is the client API for Consumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsumerClient interface {
	CacherRunner(ctx context.Context, in *Request, opts ...grpc.CallOption) (Consumer_CacherRunnerClient, error)
}

type consumerClient struct {
	cc *grpc.ClientConn
}

func NewConsumerClient(cc *grpc.ClientConn) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) CacherRunner(ctx context.Context, in *Request, opts ...grpc.CallOption) (Consumer_CacherRunnerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Consumer_serviceDesc.Streams[0], "/description.Consumer/CacherRunner", opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerCacherRunnerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consumer_CacherRunnerClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type consumerCacherRunnerClient struct {
	grpc.ClientStream
}

func (x *consumerCacherRunnerClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsumerServer is the server API for Consumer service.
type ConsumerServer interface {
	CacherRunner(*Request, Consumer_CacherRunnerServer) error
}

func RegisterConsumerServer(s *grpc.Server, srv ConsumerServer) {
	s.RegisterService(&_Consumer_serviceDesc, srv)
}

func _Consumer_CacherRunner_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsumerServer).CacherRunner(m, &consumerCacherRunnerServer{stream})
}

type Consumer_CacherRunnerServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type consumerCacherRunnerServer struct {
	grpc.ServerStream
}

func (x *consumerCacherRunnerServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

var _Consumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "description.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CacherRunner",
			Handler:       _Consumer_CacherRunner_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "descIDL.proto",
}
